## Motivation

Last week I was an attendee at .Net Developer Days conference. One of the speaker - [Jiří Činčura](https://www.tabsoverspaces.com/) was showing how easy it is to create your first Roslyn analyzer.
He convinced me that creating your own analyzer is not so hard as I initialy thought. Because of that I was able to realize my plan to write Roslyn analyzer that will help me with 1 specifical use case that I had on mind for very long time.

## Meet the [RandomAnalyzers.RequiredMember](https://github.com/shoter/RandomAnalyzers/tree/master/RandomAnalyzers.RequiredProperty)

This library provides you one simple functionality - It let you decorate members of structs/classes with `RequiredMember` attribute. 
By doing so you are informing underlying analyzer that those members should be initialized every time inside object initializer when you are creating new instance of class/struct.
If you will not initialize given member then analyzer will come into action and inform you that you made a mistake and you should initialize given field:

![](https://github.com/shoter/RandomAnalyzers/raw/master/RandomAnalyzers.RequiredProperty/imgs/Example.png)

## Example code

```csharp
using RandomAnalyzers.RequiredMember;

public class Test
{
	[RequiredMember]
	public int property { get; set; }
}

// no warnings/errors

var variable = new Test() 
{
	property = 123
};

// warning
var variable = new Test();
var variable = new Test() {};
```

## Limitations

There is one simple limitation associated with this analyzer - It's not analyzing whether given member was used inside given constructor. 
One of the reasons behind that decision is to make it work in the same way for nuget packages. Because we do not have an access to the source code of nuget package it would be hard to analyze constructors inside those to check
whether given member was initialized inside constructor. Due to this discrepancy I decided to not pursue constructor analyzis and left it as it is. 

I have a plan to write in coming days a blog post about simple introduction into Roslyn Analyzers so you will be able to know that they do not bite and are quite easy to write. :). If you do not believe then check my source code for this analyzer -> [Click!](https://github.com/shoter/RandomAnalyzers/blob/master/RandomAnalyzers.RequiredProperty/RandomAnalyzers.RequiredMember/RandomAnalyzers.RequiredMember/RandomAnalyzersRequiredPropertyAnalyzer.cs). It's simple - is not it?


